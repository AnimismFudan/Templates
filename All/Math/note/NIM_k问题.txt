Moore's Nim_k问题，是每个人每次可以从最多k堆中拿取任意多的石子，不同的堆可以不一样。
经典Nim问题实际上是Moore's Nim 1问题。

有如下结论：
对于每一堆，把它石子的个数用二进制表示；对所有的石子堆，如果在任何一个二进制位上1的个数总是k+1的整数倍，则是必败状态，反之则是必胜状态。

(1)
终止状态必然为P状态：如果不是P状态，则说明在某一位上至少有一堆石子不是空，则显然它不会是结束状态。

(2)
任何一个P状态，经过一次操作以后必然会到达N状态：在某一次移动中，至少有一堆被改变，也就是说至少有一个二进制位被改变。由于最多只能改变k堆石子，所以对于任何一个二进制位，1的个数至多改变k。而由于原先的总数为k+1的整数倍，所以改变之后必然不可能是k+1的整数倍。故在P状态下一次操作的结果必然是N状态。

(3)
任何一个N状态，总有一种操作可以使其变为P状态：从高位到低位考虑所有的二进制位。假设用了某种方法，改变了m堆，使得X位之前的所有位都可以回归到k+1的整数倍。现在要证明总有一种方法让第X位也恢复到k+1的整数倍。

我们会发现这样一个性质：对于那些已经改变的m堆，它们的第X位，我们既可以设置成0也可以设置成1，这个结论在后面证明。这样这些堆的X位是可以自由选择的，我们不去考虑它。除去这m堆之后，剩下堆在X位上1的总和sum又有两种情况，分别讨论：

1. sum <= k-m。此时可以将这些堆上的1全部拿掉，然后将那m堆的X位全设置成０。由于之前改变了m堆，现在新改变了sum堆，所以总共改变了sum+m <= k堆，满足题目要求，所以是可以达到的。

2. sum > k-m。此时我们在之前改变的m堆中选择k+1-sum堆，将它们的X位设置成1，剩下的设置成0。由于k+1-sum < k+1-(k-m) < m+1，也就是说k+1-sum <= m，故这也是可以达到的。

这样我们会发现，总有一种方法可以在满足题目要求的情况下让第X位1的总和也回归到k+1的整数倍，所以从高到低考察每一位，必然会有一种方法可以让所有的位回归到k+1的整数倍，也就是达到P状态。

以上三条即可以证明，上文所定义的N和P状态确实是满足条件的，故Moore's Nim k的结论成立。

下面证明一下上文中那个未证的问题，即在高位取走了一些石子之后，我们就可以随意指定低位上的数字。在第X位时，高位取走的石子数必然至少为2^(X+1)个，这个数是大于2^X的。如果当前第X位是1，那么我们可以通过取(结果为0)或不取(结果为1)来任意指定；如果当前第X位是0，那么我们可以通过不取(结果为0)或放回2^X个(结果为1)来调整。所以我们可以随意指定第X位上的数字。




misereversion of Nim_K 如果无路可走则获胜

分三种情况讨论：
(1)
所有的堆（非零堆，下同）全是1。此时就相当于一个经典的Nim游戏，每次最多可以取走k个石子。
按照经典misere version of Nim的结论可以判断出此时的胜负方法。
此时如果1堆个数模k+1的结果是1则必败，否则必胜。

(2)
有最少1个堆，最多k个堆的个数大于1。这时是必胜态。
注意到状态1和胜负相关的唯一因素是1堆个数模k+1的结果。我们可以通过拿走0到k个堆来随意调整当前状态模的结果，然后再将所有大于1的堆降到1就行了。所以总有一种方法可以达到状态1中的必胜态。

(3) 有多于k个堆的个数大于1。
这时可以先按照普通Nim_k的方法去走。
由于每次大于1的堆最多减少k个，所以最后必然会走到状态2。
此时应用状态2的必胜策略即可获胜。
注意到状态2必然是原始Nim_k下的N状态，也就是至少有一个二进制位不是k+1的整数倍。
则可知此时原始Nim_k下的N状态仍然是misere version的N状态。


特别说明的是，在上面的讨论中如果将k=1代入，和经典misere version of Nim的解决方法完全相同。
